// <auto-generated />
using System;
using CFAPInventoryView.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CFAPInventoryView.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CFAPInventoryView.Data.Models.AgeGroup", b =>
                {
                    b.Property<Guid>("AgeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("AgeGroupId");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.AgeGroupCategory", b =>
                {
                    b.Property<Guid>("AgeGroupCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcludeCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OptionalCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgeGroupCategoryId");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExcludeCategoryId");

                    b.HasIndex("OptionalCategoryId");

                    b.ToTable("AgeGroupCategories");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasketNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAssembled")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EthnicityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsShoppingListItem")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SafeStockLevel")
                        .HasColumnType("int");

                    b.HasKey("BasketId");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.BasketTransaction", b =>
                {
                    b.Property<Guid>("BasketTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDistributed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketTransactionId");

                    b.HasIndex("BasketId");

                    b.HasIndex("DonorId");

                    b.HasIndex("RecipientId");

                    b.ToTable("BasketTransactions");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SafeStockLevel")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.CategoryBasket", b =>
                {
                    b.Property<Guid>("CategoryBasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExcludeCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OptionalCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryBasketId");

                    b.HasIndex("BasketId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExcludeCategoryId");

                    b.HasIndex("OptionalCategoryId");

                    b.ToTable("CategoryBaskets");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DonorId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Ethnicity", b =>
                {
                    b.Property<Guid>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthnicityId");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.ExcludeCategory", b =>
                {
                    b.Property<Guid>("ExcludeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ExcludeCategoryId");

                    b.ToTable("ExcludeCategories");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.OptionalCategory", b =>
                {
                    b.Property<Guid>("OptionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SafeStockLevel")
                        .HasColumnType("int");

                    b.HasKey("OptionalCategoryId");

                    b.ToTable("OptionalCategories");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Recipient", b =>
                {
                    b.Property<Guid>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdoptiveParent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFosterParent")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RecipientId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Supply", b =>
                {
                    b.Property<Guid>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExcludeCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Expires")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OptionalCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(13, 4)
                        .HasColumnType("decimal(13,4)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("SupplyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExcludeCategoryId");

                    b.HasIndex("OptionalCategoryId");

                    b.ToTable("Supplies");

                    b.HasData(
                        new
                        {
                            SupplyId = new Guid("a4913d87-9305-4a4f-981f-09b0a226f753"),
                            CategoryId = new Guid("ec00957f-aa3b-4c34-8554-aa2aaf10335f"),
                            Description = "Pampers baby-dry leakproof day & night diapers, size 1 (8-14 lb), 44 count, unisex.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4004),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Pampers Baby Dry Diapers Size 1 (8-14 lb), 44 Count",
                            Price = 9.97m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(3998),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("3e2d5eee-ebfc-4a86-9c9c-18049eccaeed"),
                            CategoryId = new Guid("d11d87e7-126c-4a3c-8125-b6a656d64fcc"),
                            Description = "NUK newborn orthodontic pacifiers, girl, 0-2 months, 2-pack.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4012),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Orthodontic Pacifiers (2 pk, girl, 0-2 month)",
                            Price = 6.77m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4009),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("dd6d4bec-20f1-4149-8f14-2141bad77e9b"),
                            CategoryId = new Guid("a809dfba-5e21-491e-ab19-5374a141fe88"),
                            Description = "The Very Hungry Caterpillar, Board Book, English, 0-3 yrs, Infant-Toddler",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4019),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "The Very Hungry Caterpillar (board book)",
                            Price = 8.78m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4016),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("d5b42185-f6f5-4d33-9c7d-392eadb5b1e6"),
                            CategoryId = new Guid("65ea10fe-b443-4233-a48a-d8bd7896d244"),
                            Description = "Gilquen baby organic cotton swaddle blankets for 0-3 months infant boys girls, adjustable newborn swaddles, 3-pack wrap set, twinkle & rainbow.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4027),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Baby Cotton Swaddle Blankets (0-3 months, 3-pk)",
                            Price = 18.76m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4023),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("9e0ef560-c184-46bb-9f57-45e295bf57b2"),
                            CategoryId = new Guid("d07d2c78-acbb-4d73-806d-1b5c67914554"),
                            Description = "Huggies natural care refreshing baby wipes, scented, (3 pk, 168 ct)",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4034),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Huggies Baby Wipes (scented, 3 pk, 168 ct)",
                            Price = 6.77m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4031),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("06f703f4-dfbf-4fd0-b0a6-5c75bc8fe17a"),
                            CategoryId = new Guid("2fb04be4-3b23-42eb-9534-20d767654667"),
                            Description = "Koala baby girls' newborn blanket sleeper, 2 pack, take me home sleep n play pajamas (Newborn-6M)",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4041),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Koala Baby Footed Sleeper (girl, 2 pk, NB-6M)",
                            Price = 10.58m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4038),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("16f0b155-8127-4eab-99e1-65473bc89952"),
                            CategoryId = new Guid("61da1441-6b0e-4d1a-88a2-ec632d01906d"),
                            Description = "Johnson's head-to-toe gentle baby wash & shampoo, tear-free, sulfate-free & hypoallergenic wash for baby's sensitive skin & hair, 27.1 fl. oz.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4048),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Gentle Baby Wash & Shampoo (tear-free, sulfate-free, hypoallergenic, 27.1 fl oz)",
                            Price = 11.95m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4045),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("1ec27cd4-58a3-49d3-8395-8d83536a4305"),
                            CategoryId = new Guid("bf225467-4b08-4da0-a1e5-2ef0ff6e2f96"),
                            Description = "Desitin maximum strength baby diaper rash cream with zinc oxide, 4 oz",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4055),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Desitin Diaper Cream (4 oz)",
                            Price = 7.78m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4052),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("5aa553c8-f564-4755-9d2a-8e5a66f884d1"),
                            CategoryId = new Guid("cdfc6b7f-31fb-4bd1-a246-6b8efc241dff"),
                            Description = "Aveeno baby daily moisture body lotion for sensitive skin with natural colloidal oatmeal, suitable  for newborns, 18 FL oz",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4063),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Aveeno Baby Daily Moisture Body Lotion (sensitive skin, 18 FL oz)",
                            Price = 11.38m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4060),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("331d83d3-04e4-41ca-9527-8ebcc1316090"),
                            CategoryId = new Guid("d07d2c78-acbb-4d73-806d-1b5c67914554"),
                            Description = "Pampers sensitive baby wipes, 8 flip-top packs, 672 wipes",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4069),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Pampers Baby Wipes (sensitive, 8 pk, 672 wipes)",
                            Price = 23.47m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4067),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("6d59f00f-d7d8-48e3-ab36-9d96de8b09d0"),
                            CategoryId = new Guid("7ac8c99f-aaca-4883-ab1f-fb94fbaa9fca"),
                            Description = "NUK smooth flow pro anti-colic baby bottle, 5 oz, blue, 3-pack",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4076),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Anti-colic Baby Bottles (blue, 3 pk, 5 oz)",
                            Price = 14.97m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4074),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("7604aea7-96b0-4096-8bbb-bbef00fdc221"),
                            CategoryId = new Guid("ec00957f-aa3b-4c34-8554-aa2aaf10335f"),
                            Description = "Pampers swaddlers diapers, newborn (< 10 lb), 31 count, unisex",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4083),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Pampers Diapers (NB, 31 count)",
                            Price = 14.5m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4080),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("a864cd79-d226-441d-9f23-db77c2b9bd85"),
                            CategoryId = new Guid("c50504d5-a7ec-4aab-acae-0ed0a39d1578"),
                            Description = "Amerteer 4 pcs foot finder socks & wrist rattles - newborn toys for baby boy or girl - brain development infant toys - hand and foot rattles suitable for 0-3, 3-6, 6-12 month babies.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4091),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Foot Finder Socks & Wrist Rattles (NB, toys, 4 pcs)",
                            Price = 7.28m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4088),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("07979a90-bab9-47cf-befd-f0b16999ee00"),
                            CategoryId = new Guid("f27211ee-28cb-42a1-b487-51aa7456ccd3"),
                            Description = "Gerber baby boy and girl unisex terry bootie wiggle-proof socks, 4-pack, newborn, 0-6 months.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4098),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Baby socks (unisex, 4 pk, newborn, 0-6 months)",
                            Price = 4.00m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4095),
                            Quantity = 1
                        },
                        new
                        {
                            SupplyId = new Guid("3a13f50b-b57f-44ae-ba14-f65e4e27cd54"),
                            CategoryId = new Guid("ec00957f-aa3b-4c34-8554-aa2aaf10335f"),
                            Description = "Pampers baby-dry leakproof day & night diapers, size 2 (12-18 lb), 37 count, unisex.",
                            Expires = false,
                            LastUpdateDateTime = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4104),
                            LastUpdateId = "travis@mailsac.com",
                            Name = "Pampers Baby Dry Diapers Size 2 (12-18 lb), 37 Count",
                            Price = 9.97m,
                            PurchaseDate = new DateTime(2023, 11, 20, 15, 39, 33, 982, DateTimeKind.Local).AddTicks(4102),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.SupplyBasket", b =>
                {
                    b.Property<Guid>("SupplyBasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplyBasketId");

                    b.HasIndex("BasketId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyBaskets");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.SupplyTransaction", b =>
                {
                    b.Property<Guid>("SupplyTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDistributed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplyTransactionId");

                    b.HasIndex("DonorId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.AgeGroupCategory", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Category", null)
                        .WithMany("AgeGroups")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.ExcludeCategory", null)
                        .WithMany("AgeGroups")
                        .HasForeignKey("ExcludeCategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.OptionalCategory", null)
                        .WithMany("AgeGroups")
                        .HasForeignKey("OptionalCategoryId");

                    b.Navigation("AgeGroup");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Basket", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Ethnicity", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.BasketTransaction", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.Basket", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Donor", null)
                        .WithMany("BasketTransactions")
                        .HasForeignKey("DonorId");

                    b.HasOne("CFAPInventoryView.Data.Models.Recipient", "Recipient")
                        .WithMany("BasketTransactions")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.CategoryBasket", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.Basket", null)
                        .WithMany("CategoryBaskets")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.ExcludeCategory", "ExcludeCategory")
                        .WithMany()
                        .HasForeignKey("ExcludeCategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.OptionalCategory", "OptionalCategory")
                        .WithMany()
                        .HasForeignKey("OptionalCategoryId");

                    b.Navigation("Category");

                    b.Navigation("ExcludeCategory");

                    b.Navigation("OptionalCategory");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Supply", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.ExcludeCategory", "ExcludeCategory")
                        .WithMany()
                        .HasForeignKey("ExcludeCategoryId");

                    b.HasOne("CFAPInventoryView.Data.Models.OptionalCategory", "OptionalCategory")
                        .WithMany()
                        .HasForeignKey("OptionalCategoryId");

                    b.Navigation("Category");

                    b.Navigation("ExcludeCategory");

                    b.Navigation("OptionalCategory");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.SupplyBasket", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.Basket", null)
                        .WithMany("SupplyBaskets")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.SupplyTransaction", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.Donor", null)
                        .WithMany("SupplyTransactions")
                        .HasForeignKey("DonorId");

                    b.HasOne("CFAPInventoryView.Data.Models.Recipient", "Recipient")
                        .WithMany("SupplyTransactions")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.Supply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFAPInventoryView.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CFAPInventoryView.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Basket", b =>
                {
                    b.Navigation("CategoryBaskets");

                    b.Navigation("SupplyBaskets");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Category", b =>
                {
                    b.Navigation("AgeGroups");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Donor", b =>
                {
                    b.Navigation("BasketTransactions");

                    b.Navigation("SupplyTransactions");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.ExcludeCategory", b =>
                {
                    b.Navigation("AgeGroups");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.OptionalCategory", b =>
                {
                    b.Navigation("AgeGroups");
                });

            modelBuilder.Entity("CFAPInventoryView.Data.Models.Recipient", b =>
                {
                    b.Navigation("BasketTransactions");

                    b.Navigation("SupplyTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
